# Silal FMS & WMS Integration - Nuummite-Summary Review

## Project Overview

As part of Silal initiation to integrate FMS and WMS systems, Nuummite has been involved to evaluate the best approach for the integration considering the below scope

* Master Data
  * Item Master
  * Business Partner Master (Customer Master)
  * Business Partner Master (Supplier Master)
* Processes
  * Bill Of Material
  * Purchase order
  * Goods Receive Details
  * Goods Transfer
  * Goods Discard
  * Sales Order
  * Delivery Dispatch
  * Sales Goods Return
  * Repacking Details
  * Material to Material Stock Transfer
  * Material Indent/Requisition
  * Batch Wise Current Stock
  * Physical Inventory
  * Item Expiry Stock
  * Item Expired Stock
  * Stock adjustment at warehouse(stocktaking/Cycle count)
  * Internal movement

## Integration Discussed Mechanism

Due to the unavailability of a pre-built API integration in the FMS system, we explored the possibility of integrating the two data sources through an `ODBC (Open Database Connectivity)` connection. To establish this ODBC connection between the FMS Data Source, situated in UAE data centers, and the WMS Data Source, located in German data centers, a VPN (Virtual Private Network) connection is essential.

### Integration Dependencies

* ODBC Driver Compatibility: The successful integration between the FMS and WMS depends on ensuring that both systems support the same ODBC driver. The ODBC driver acts as a bridge between the two systems, enabling them to communicate and exchange data effectively.
* Data Schema and Format: The FMS and WMS must agree on a common data schema and format to facilitate seamless data exchange through ODBC. For instance, both systems should use consistent data types, field names, and encoding to avoid conflicts during integration.
* Data Validation and Cleansing: Prior to integration, it is crucial to perform data validation and cleansing to ensure that the data in both systems is accurate, consistent, and free from errors. This process involves identifying and rectifying any discrepancies or inconsistencies in the data.
* Data Security and Encryption: Since agricultural businesses like Silal deal with sensitive data, data security is of utmost importance. The integration should include robust security measures, such as data encryption during transmission through ODBC, to safeguard against unauthorized access and data breaches.
* Real-time Data Synchronization: For efficient operations, Silal may require real-time or near-real-time data synchronization between the FMS and WMS. The integration process must handle the frequency and timing of data updates to maintain up-to-date information across both systems.
* Error Handling and Logging: The integration should implement effective error handling mechanisms to address any issues that may arise during data exchange through ODBC. Detailed error logging and monitoring will help in identifying and resolving integration problems promptly.
* Integration Testing and Validation: Rigorous testing of the ODBC integration is essential to verify that data is transferred accurately between the FMS and WMS. This includes validating data transformation, data integrity, and verifying that business processes in both systems function as expected.
* Documentation and Support: Clear documentation of the integration process and support materials should be provided to assist system administrators and users in understanding the integration's functionality and troubleshooting any issues that may arise.

## Integration Risks and Chalanges 

### General

* The absence of a Staging database for the FMS necessitates a substantial endeavor to establish a robust data mapping process between the FMS and the WMS, considering the paramount importance of data integrity. Also, gathering data from FMS data source and turning them into a unified structure to sync with WMS is a big challenge.
* No ready-made API integration in the FMS system. API integration is the recommended integration approach.

### Performance

* Given the objective of integrating the two data sources through an ODBC (Open Database Connectivity) connection, it is imperative to conduct a Proof of Concept (POC) before proceeding with the actual integration implementation.
* ODBC (Open Database Connectivity) can introduce latency in certain situations. When using ODBC, there can be several factors that contribute to latency:
  * Network Latency: As the WMS database located remotely `In Germany`, the time it takes for data to travel back and forth between the FMS and WMS can introduce network latency.
  * Query Execution Time: The complexity and size of the query `If applicable` being executed on the database can impact latency. Long-running queries or queries that require significant processing time can lead to delays.
  * Server Load: If the database server is under heavy load, it may not be able to respond to ODBC requests as quickly, resulting in increased latency.
  * Connection Pooling: If connection pooling is not utilized effectively, establishing a new connection for each ODBC request can lead to additional overhead and latency.
* A VPN connection is required to estaplish the ODBC connection. Setting up a VPN connection between the FMS data source and the WMS data source may result in increased latency.
  * Distance: As the VPN server is located far away from the destination server (WMS Data Srouces), data has to travel a longer distance, which can result in higher latency.
  * Server Load: The load on the VPN server can impact latency. If the server is handling a large number of users or experiencing heavy traffic, it may take longer to process and forward data.
  * Encryption/Decryption Overhead: Encrypting and decrypting data for secure transmission adds processing overhead, which can contribute to increased latency.
  * Network Congestion: If the network between your the VPN server (FMS), and the destination server (WMS) experiences congestion, it can lead to delays in data transmission.
  * Quality of VPN Service: The quality and performance of the VPN service provider can also affect latency.

### Scalability

Integrating two systems via ODBC (Open Database Connectivity) can present several challenges for scalability, especially as data volumes and processing demands increase. Some of the key challenges include:

* Performance Bottlenecks: As the amount of data transferred between the two systems grows, ODBC connections might encounter performance bottlenecks, leading to slower data transmission and response times.
* Network Latency: ODBC connections rely on network communication to transfer data between systems. Increased network latency, particularly over long distances, can negatively impact the integration's scalability and responsiveness.
* Connection Pooling: Scaling ODBC connections can become complex when handling multiple concurrent users or applications trying to access the data sources simultaneously. Proper connection pooling and management are essential to efficiently utilize database connections and avoid resource contention.
* Database Load: The integration can put additional load on both databases, affecting their performance. As the number of integration requests grows, the databases might experience higher CPU and memory usage, potentially leading to degraded performance for FMS and WMS applications.

### Maintenance and Support

The integration between the FMS and the WMS necessitates the leading responsibility of maintenance and support by the respective system providers Moreover, the lack of a Staging database for the FMS adds to the maintenance complexity, given the criticality of ensuring data integrity.
